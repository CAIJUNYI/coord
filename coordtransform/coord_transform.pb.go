// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coord_transform.proto

package coordtransform

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Point struct {
	Lat                  float64  `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon                  float64  `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb640242dfe57fb1, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Point) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func init() {
	proto.RegisterType((*Point)(nil), "coordtransform.Point")
}

func init() { proto.RegisterFile("coord_transform.proto", fileDescriptor_fb640242dfe57fb1) }

var fileDescriptor_fb640242dfe57fb1 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xce, 0xcf, 0x2f,
	0x4a, 0x89, 0x2f, 0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0xcb, 0x2f, 0xca, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x03, 0x0b, 0xc3, 0x45, 0x95, 0xb4, 0xb9, 0x58, 0x03, 0xf2, 0x33, 0xf3, 0x4a,
	0x84, 0x04, 0xb8, 0x98, 0x73, 0x12, 0x4b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x18, 0x83, 0x40, 0x4c,
	0xb0, 0x48, 0x7e, 0x9e, 0x04, 0x13, 0x54, 0x24, 0x3f, 0xcf, 0xa8, 0x81, 0x99, 0x8b, 0xcf, 0x19,
	0xa4, 0x3f, 0x04, 0xa6, 0x5f, 0xc8, 0x86, 0x8b, 0xc7, 0xdd, 0xd9, 0xcb, 0xc0, 0x28, 0x24, 0x3f,
	0xdc, 0x3d, 0xd8, 0xc2, 0x44, 0x48, 0x54, 0x0f, 0xd5, 0x02, 0x3d, 0xb0, 0xe9, 0x52, 0xd8, 0x85,
	0x41, 0xba, 0xc1, 0xda, 0x42, 0xf2, 0xc1, 0x86, 0x90, 0xa8, 0xdb, 0x9a, 0x8b, 0xdb, 0x29, 0xc5,
	0xc0, 0x92, 0x6c, 0xcd, 0x50, 0x87, 0x83, 0xcc, 0x20, 0xd7, 0x66, 0x72, 0x3c, 0x6d, 0xcd, 0xc5,
	0x0d, 0xf5, 0x34, 0xe9, 0x36, 0x3b, 0x09, 0x44, 0xa1, 0xc5, 0x60, 0x12, 0x1b, 0x38, 0x62, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0xb4, 0xcf, 0xda, 0xf1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoordTransformClient is the client API for CoordTransform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoordTransformClient interface {
	GCJ02ToWGS84(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
	WGS84ToGCJ02(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
	Bd09ToGCJ02(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
	GCJ02ToBd09(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
	Bd09ToWGS84(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
	WGS84ToBd09(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
}

type coordTransformClient struct {
	cc *grpc.ClientConn
}

func NewCoordTransformClient(cc *grpc.ClientConn) CoordTransformClient {
	return &coordTransformClient{cc}
}

func (c *coordTransformClient) GCJ02ToWGS84(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/coordtransform.CoordTransform/GCJ02ToWGS84", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordTransformClient) WGS84ToGCJ02(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/coordtransform.CoordTransform/WGS84ToGCJ02", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordTransformClient) Bd09ToGCJ02(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/coordtransform.CoordTransform/Bd09ToGCJ02", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordTransformClient) GCJ02ToBd09(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/coordtransform.CoordTransform/GCJ02ToBd09", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordTransformClient) Bd09ToWGS84(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/coordtransform.CoordTransform/Bd09ToWGS84", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordTransformClient) WGS84ToBd09(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/coordtransform.CoordTransform/WGS84ToBd09", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordTransformServer is the server API for CoordTransform service.
type CoordTransformServer interface {
	GCJ02ToWGS84(context.Context, *Point) (*Point, error)
	WGS84ToGCJ02(context.Context, *Point) (*Point, error)
	Bd09ToGCJ02(context.Context, *Point) (*Point, error)
	GCJ02ToBd09(context.Context, *Point) (*Point, error)
	Bd09ToWGS84(context.Context, *Point) (*Point, error)
	WGS84ToBd09(context.Context, *Point) (*Point, error)
}

func RegisterCoordTransformServer(s *grpc.Server, srv CoordTransformServer) {
	s.RegisterService(&_CoordTransform_serviceDesc, srv)
}

func _CoordTransform_GCJ02ToWGS84_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordTransformServer).GCJ02ToWGS84(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordtransform.CoordTransform/GCJ02ToWGS84",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordTransformServer).GCJ02ToWGS84(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordTransform_WGS84ToGCJ02_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordTransformServer).WGS84ToGCJ02(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordtransform.CoordTransform/WGS84ToGCJ02",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordTransformServer).WGS84ToGCJ02(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordTransform_Bd09ToGCJ02_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordTransformServer).Bd09ToGCJ02(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordtransform.CoordTransform/Bd09ToGCJ02",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordTransformServer).Bd09ToGCJ02(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordTransform_GCJ02ToBd09_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordTransformServer).GCJ02ToBd09(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordtransform.CoordTransform/GCJ02ToBd09",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordTransformServer).GCJ02ToBd09(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordTransform_Bd09ToWGS84_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordTransformServer).Bd09ToWGS84(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordtransform.CoordTransform/Bd09ToWGS84",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordTransformServer).Bd09ToWGS84(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordTransform_WGS84ToBd09_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordTransformServer).WGS84ToBd09(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordtransform.CoordTransform/WGS84ToBd09",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordTransformServer).WGS84ToBd09(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoordTransform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coordtransform.CoordTransform",
	HandlerType: (*CoordTransformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GCJ02ToWGS84",
			Handler:    _CoordTransform_GCJ02ToWGS84_Handler,
		},
		{
			MethodName: "WGS84ToGCJ02",
			Handler:    _CoordTransform_WGS84ToGCJ02_Handler,
		},
		{
			MethodName: "Bd09ToGCJ02",
			Handler:    _CoordTransform_Bd09ToGCJ02_Handler,
		},
		{
			MethodName: "GCJ02ToBd09",
			Handler:    _CoordTransform_GCJ02ToBd09_Handler,
		},
		{
			MethodName: "Bd09ToWGS84",
			Handler:    _CoordTransform_Bd09ToWGS84_Handler,
		},
		{
			MethodName: "WGS84ToBd09",
			Handler:    _CoordTransform_WGS84ToBd09_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coord_transform.proto",
}
